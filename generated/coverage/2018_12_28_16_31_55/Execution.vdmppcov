class Execution

types
public string = seq of char;
public Category = <Pizza> | <SnacksDrinks> | <Candies> | <Pharmacy> | <Sushi>;

values
address1 : User`Address = mk_User`Address("as","as","as","as");

instance variables
private stores: seq of Store;
private products: seq of Product;
private couriers: seq of Courier;
private orders: seq of Order;

-- Users
user1 : User := new User("test@hotmail.com", address1);
users : seq of User := [user1];

-- Products
prod1A : Product := new Product("Rabanada", 2.5, "Rabanada de Convento", <Candies>, 5);
prod2A : Product := new Product("Bolina", 1.5, "Docinho de Bolina", <Candies>, 10);
prod3A : Product := new Product("Bolo Rei", 3.99, "Bolo Rei sem frutos", <Candies>, 6);
prodsA : seq of Product := [prod2A,prod3A];

prod1B : Product := new Product("Pizza Tropical", 10, "Pizza com ananas", <Pizza>, 3);
prod2B : Product := new Product("Pizza Funghi", 7, "Pizza com cogumelos", <Pizza>, 8);
prod3B : Product := new Product("Pizza Margherita", 6.5, "Pizza normal", <Pizza>, 2);
prodsB : seq of Product := [prod2B,prod3B];


-- Stores
store1: Store := new Store("store1", "Candies Store", "10-15min", 1.5, prodsA);
store2: Store := new Store("store2", "Papa Pizza", "10-30min", 5, prodsB);

operations

public Execution: () ==> Execution
Execution() == (
stores := []; products := []; couriers := []; users := []; orders := []; 
stores := stores ^ [store1];
products := products ^ [prod1A, prod2A, prod3A];
users := users ^ [user1]; 
return self
);

public getUsers: () ==> seq of User
getUsers() == return users;

public getUser1: () ==> User
getUser1() == return user1;

public getAllStores: () ==> seq of Store
getAllStores() == return stores;

public getAllCouriers: () ==> seq of Courier
getAllCouriers() == return couriers;

public getProduct1: () ==> Product
getProduct1() == return prod1A;

public populateDB: () ==> nat
populateDB() == (

return 1;
);

-- list category
-- list stores by category
-- create order
-- add product to order
-- close order

-- list all orders
-- list couriers
-- assign current orders to courier (closed orders)

-- list orders 
-- close order
-- show available
-- close available

 
functions
-- TODO Define functiones here
 traces
-- TODO Define Combinatorial Test Traces here
end Execution


-- create t := new Execution()
-- print t.getUser1().setPersonInfo("Teste", <Male>, 20)
-- print t.getUser1()
-- print t.getStore1().addProduct(t.getProduct1())