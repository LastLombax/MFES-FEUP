class Order
types
public string = seq of char;
public State = <INIT> | <ORDER_CONCLUDED> | <DELIVERED> ;
values
-- TODO Define values here
instance variables
private orderID:  int;
private totalCost : real;
private products : seq of Product;
private courier : [Courier];
private user : User;
private state: State;

operations
public Order: User ==> Order
Order(user_reference) == (
products := [];
state := <INIT>;
orderID := 1000;
user := user_reference; 
totalCost := 0;
return self
);

public addProduct: Product ==> int
addProduct(newProd) == (
dcl auxRet : nat ;
for prod in products do 
(
if prod.getName() = newProd.getName() 
then (auxRet:=prod.addStock(newProd.getStock());) 
else products := products ^ [newProd];
);
return 1;
);

public getId: () ==> int
getId() == return orderID;

public getTotalCost: () ==> real
getTotalCost() == return totalCost;

public getProducts: () ==> seq of Product
getProducts() == return products;

public getCourier: () ==> Courier
getCourier() == return courier;

public getUser: () ==> User
getUser() == return user;

public setState: State ==> State
setState(newState) == (state:=newState; return state;);

public getState: () ==> State
getState() == return state;

public finishOrder: () ==> int
finishOrder() == (
for prod in products do(totalCost := totalCost + prod.getPrice()*prod.getStock());
state := <ORDER_CONCLUDED>;
return 1;
);

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Order