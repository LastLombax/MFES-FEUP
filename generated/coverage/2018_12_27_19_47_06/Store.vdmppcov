class Store
types
public string = seq of char;
values
-- TODO Define values here
instance variables
private name : string;
private description : string;
private estimateTime : string;
private deliveryCost : real;
private products : seq of Product;

inv '-' in set elems estimateTime;

operations
public Store: string * string * string * real ==> Store
Store(na, des, time, cost) == (name := na; description := des; estimateTime:=time; deliveryCost := cost; products := []; return self)
pre cost > 0
post self.deliveryCost = cost;
public getName: () ==> string
getName() == return name;

public getDescription: () ==> string
getDescription() == return description;

public getEstimateTime: () ==> string
getEstimateTime() == return estimateTime;

public getDeliveryCost: () ==> real
getDeliveryCost() == return deliveryCost;

public addProduct: Product ==> nat
addProduct(p) == (
products := products ^ [p];
return len products;
);

public removeProduct: Product ==> nat
removeProduct(p) == (
products := tl products;
return len products;
)



functions
-- TODO Define Combinatorial Test Traces here
end Store