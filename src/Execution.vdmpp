class Execution

types
public string = seq of char;

values
address1 : User`Address = mk_User`Address("as","as","as","as");
address2 : User`Address = mk_User`Address("as","bl","44","z9");

instance variables
public stores: seq of Store;
public products: seq of Product;
public couriers: seq of Courier;
public orders: seq of Order;
public refOrders: map int to int;
public users: seq of User;
public categories: set of string;

-- Users
user0 : User := new User("blankuser", address1);
user1 : User := new User("bernas@hotmail.com", address1);
user2 : User := new User("vitorino@hotmail.com", address2);

-- Couriers
courier1 : Courier := new Courier("maria@glovo.com", 3);

-- Products
prod1A : Product := new Product("Rabanada", 2.5, "Rabanada de Convento", 5);
prod2A : Product := new Product("Bolina", 1.5, "Docinho de Bolina", 10);
prod3A : Product := new Product("Bolo Rei", 3.99, "Bolo Rei sem frutos", 6);
prodsA : seq of Product := [prod1A,prod2A,prod3A];

prod1B : Product := new Product("Pizza Tropical", 10, "Pizza com ananas", 3);
prod2B : Product := new Product("Pizza Funghi", 7, "Pizza com cogumelos", 8);
prod3B : Product := new Product("Pizza Margherita", 6.5, "Pizza normal", 2);
prodsB : seq of Product := [prod1B,prod2B,prod3B];

prod1C : Product := new Product("Sashimi", 30, "Peixe Sashimi", 3);
prod2C : Product := new Product("Hosomaki", 41, "Peixe Hosomaki", 8);
prod3C : Product := new Product("Uramaki", 90, "Peixe com Arrroz", 2);
prod4C : Product := new Product("Hot Roll", 19, "Sushi Nuggets", 2);
prodsC : seq of Product := [prod1C,prod2C,prod3C,prod4C];

prod1D : Product := new Product("Penso Rápido", 10, "Pensos", 7);
prod2D : Product := new Product("Ben-u-ron", 20, "Benuron 1000mg", 8);
prod3D : Product := new Product("Akiliever", 50, "Melhor creme para as mãos", 18);
prod4D : Product := new Product("Nivea", 19, "Creme corporal", 9);
prodsD : seq of Product := [prod1D,prod2D,prod3D,prod4D];

prod1E : Product := new Product("Croissant", 4, "Croissa Simples", 4);
prod2E : Product := new Product("Lanche", 11, "Lanche Misto", 6);
prod3E : Product := new Product("Tapioca", 2, "Sobremesa", 5);
prod4E : Product := new Product("Mini Francesinha", 9, "Francesinha tapa", 11);
prodsE : seq of Product := [prod1E,prod2E,prod3E,prod4E];

prod1F : Product := new Product("Bolo Chocolate", 5, "O melhor bolo do mundo", 5);
prod2F : Product := new Product("Dolce Bolinho", 12, "Especialidade da Casa", 10);
prod3F : Product := new Product("Camarao", 21, "Camarao lindo", 13);
prod4F : Product := new Product("Tosta Alentejana", 91, "Tosta Alentejana com oregaos", 6);
prodsF : seq of Product := [prod1F,prod2F,prod3F,prod4F];

-- Stores
store1: Store := new Store("store1", "candies", "Candies Store", "10-15min", 1.5, prodsA);
store2: Store := new Store("store2", "pizza", "Papa Pizza", "10-30min", 5, prodsB);
store3: Store := new Store("store3", "sushi", "Sushi For Life", "10-15min", 9, prodsC);
store4: Store := new Store("store4", "pharmacy", "Pharmacy Feupy", "10-40min", 20, prodsD);
store5: Store := new Store("store5", "snacks", "Divino Rosa", "6-12min", 6, prodsE);
store6: Store := new Store("store6", "snacks", "Divino Rosalino", "3-6min", 7, prodsF);

-- Orders
order1: Order := new Order(user1);

inv stores <> [];
inv couriers <> [];

operations

public Execution: () ==> Execution
Execution() == ( 
stores := []; products := []; couriers := []; users := []; orders := []; 
stores := stores ^ [store1,store2,store3,store4,store5,store6];
products := products ^ [prod1A, prod2A, prod3A];
couriers := couriers ^ [courier1]; 
refOrders := {0 |-> -1 };
users := users ^ [user0,user1,user2];
categories :=  {"pizza", "snacks", "candies", "pharmacy", "sushi"};
IO`println("Welcome to Feup-Glovo App! Made by MFES Brothers."); 
IO`println("Here is what you can do:"); 
IO`println("Add a User: print t.addUser(email, address, street, zip-code, country)");
IO`println("Add a Courier: print t.addCourier(cardID,salary)");
IO`println("Create an Order : print t.createOrder(name@mail.com)");
IO`println("Add Product to Order : print t.addProductToOrder(name@mail.com,OrderID,storeName,productIndex,numberUnits)");
IO`println("Conclude your order: print t.concludeOrder(name@mail.com,OrderID)");
IO`println("Assign a Courier to your order: print t.assignCourier(courier@glovo.com,OrderID)");
IO`println("Perform an Order : print t.performOrder(courier@glovo.com,OrderID)");
IO`println("Set Person Info: print t.user1(name, gender, age)");
IO`println("List Categories : print t.listCategories()");
IO`println("List Stores by Category : print t.listStores(CategoryName)");
IO`println("List Stores by DeliveryCost : print t.listStoresWithDeliveryCost(CategoryName)");
IO`println("List Products of Store : print t.listStoreProducts(StoreName)");
IO`println("List Orders : print t.listOrders(request) -> request can be all or UserEmail");
IO`println("List Delivered Orders : print t.listOrdersDelivered(request) -> request can be all or UserEmail");
IO`println("List Users : print t.listUsers()");
IO`println("List Couriers : print t.listCouriers()");
IO`println("Check earned money from a store: print t.earnedMoneyFromStore(storeName)");
return self 
)
post RESULT = self;

public addUser: string * string * string * string * string ==> string
addUser(email, address, street, zip_code, country) == ( 
dcl newAddress : User`Address := mk_User`Address(address,street,zip_code,country);
dcl newUser : User := new User(email, newAddress);
users := users ^ [newUser];
return "Result: User added to Users list.";
)
pre not exists user in set elems users & user.getEmail()= email;

public addCourier: string * int ==> string
addCourier(idCard, salary) == ( 
dcl newCourier : Courier := new Courier(idCard, salary);
couriers := couriers ^ [newCourier];
return "Result: Courier added to Couriers list.";
)
pre not exists courier in set elems couriers & courier.getCardID()= idCard
post exists courier in set elems couriers & courier.getCardID()= idCard;

public increaseProductStock: string * int * int ==> string
increaseProductStock(storeName, productIndex, unitsToAdd) == ( 
for store in stores do (
	if store.getName()=storeName then ( 
	   dcl product : Product;
	   product := store.getProduct(productIndex); 
		 product.addStock(unitsToAdd);
		 IO`print("Product: "); IO`println(product.getName()); 
		 IO`print("Added Units: "); IO`println(unitsToAdd); 
		 IO`print("Current Stock: "); IO`println(product.getStock()); 
		 return "Result: Success."; 
		 );
);
return "No store/product found."; 
)
pre unitsToAdd > 0;


public performOrder: string * int ==> string
performOrder(courierID, orderID) == ( 
 dcl auxCourier : Courier ;
 dcl auxReturn: int ;
 for courier in couriers do  (if(courier.getCardID()=courierID) then auxCourier := courier; );
 for order in orders do ( 
 	if order.getId() = orderID then auxReturn := order.deliverOrder(courierID);
 	);
IO`print("Order: "); IO`println(orderID); 
IO`println("Order State: DELIVERED"); 
IO`println("By Courier: " ^ courierID); 
return "Result: success";
)
pre (orderID in set dom refOrders 
 and exists1 order in set elems orders & order.getId() = orderID 
 and exists1 courier in set elems couriers & courier.getCardID() = courierID 
 and order.getState() = <ORDER_CONCLUDED> 
 and order.getCourier().getCardID() = courierID 
 )
post exists order in set elems orders & (order.getId() = orderID and order.getState() = <DELIVERED>);


public assignCourier: string * int ==> string
assignCourier(courierID, orderID) == ( 
 dcl auxCourier : Courier ;
 dcl auxReturn: int ;
 for courier in couriers do  (if(courier.getCardID()=courierID) then auxCourier := courier; );
 for order in orders do ( 
 	if order.getId() = orderID then auxReturn:=order.setCourier(auxCourier);
 	);
IO`print("Order: "); IO`println(orderID); 
IO`print("Assigned Courier: "); IO`println(courierID); 
return "Result: success";
) 
pre exists1 order in set elems orders & (order.getId() = orderID and (order.courier = nil or order.getCourier().getCardID() <> courierID) and order.getState() = <ORDER_CONCLUDED>)
 and exists1 courier in set elems couriers & courier.getCardID() = courierID 
post exists1 order in set elems orders & (order.getId() = orderID and order.getCourier().getCardID() = courierID);

 
public createOrder: string ==> int
createOrder(email) == ( 
for user in users do ( 
		if user.getEmail() = email then
			( 
			dcl newOrder : Order := new Order(user);
			orders := orders ^ [newOrder]; 
			refOrders := refOrders ++ {newOrder.getId() |-> len orders };
			IO`println("New Order for " ^ user.getEmail()); 
			IO`print("Order ID "); IO`println(newOrder.getId()); 
			IO`println("Please add Products");
			return newOrder.getId();
			) 
		);
	return -1;
)
pre exists user in set elems users & user.getEmail() = email;


public cancelOrder: int ==> string
cancelOrder(orderId) == ( 

dcl newRefOrders : map int to int;
dcl newOrders : seq of Order; 
newOrders := [];
newRefOrders := {0 |-> -1 };

for order in orders do ( 
		if(order.getId() <> orderId) then (
		newOrders := newOrders^[order];
		newRefOrders := newRefOrders ++ {order.getId() |-> len newOrders };
		);
	);

orders := newOrders;
refOrders := newRefOrders;
return "Success: Order Canceled";
)
pre exists order in set elems orders & order.getId() = orderId;


public cloneProd: Product * nat * Store ==> Product
cloneProd(refProd, numberUnits, storeRef) == ( 
dcl auxRet : int ;
dcl newProd : Product := new Product(refProd.getName(), refProd.getPrice(), refProd.getDescription(), numberUnits);
auxRet := newProd.setStore(storeRef);
return newProd;
)
post refProd.getName() = RESULT.getName() and refProd.getPrice() = RESULT.getPrice() and refProd.getDescription() = RESULT.getDescription();


public addProductToOrder: string * int * string * int * nat ==> string
addProductToOrder(email, orderId, storeName, productIndex, numberUnits) == ( 
for store in stores do ( 
 if store.getName() = storeName then 
 ( 
 	dcl auxRet : int ;
 	dcl refProd : Product := store.getProduct(productIndex); 
 	dcl newProd : Product := cloneProd(refProd, numberUnits, store);
 	dcl newStock : nat := refProd.removeStock(numberUnits);
 	for order in orders do ( 
		if order.getId() = orderId then
			(
			if order.getUser().getEmail() = email then (auxRet := order.addProduct(newProd););
			IO`println("Product(s) added. Current Order:"); 
			for prod in order.getProducts() do (IO`print(prod.getName() ^ ". Quantity: "); IO`println(prod.getStock())); 
			return "Result: success";
			)  
		);
 ) );
	return "error";
)
pre exists1 order in set elems orders & (order.getId() = orderId and order.getState() = <INIT>)
	and products(productIndex).getStock() >= numberUnits 
	and exists user in set elems users & user.getEmail() = email 
	and exists store in set elems stores & store.getName() = storeName 
	and products(productIndex) in set elems products;


public removeProductFromOrder: int  * int  ==> string
removeProductFromOrder(orderId, productIndex) == ( 
dcl refOrder : Order ;
dcl numberUnits : nat ;
dcl refProduct : Product ;
dcl productName : string ;
dcl orderProducts : seq of Product ;
dcl newProdsList : seq of Product ;
newProdsList := [];

 	for order in orders do ( 
		if order.getId() = orderId then
			(
			refOrder := order;
			orderProducts := order.getProducts();
			productName := order.products(productIndex).getName();
			refProduct := order.products(productIndex);
			numberUnits := products(productIndex).getStock();
			)  
		);
		
	for prod in orderProducts do ( 
		if prod.getName() <> productName then
			(
				newProdsList := newProdsList ^ [prod];
				refOrder.products := newProdsList;
			)  
		);
		
	for store in stores do ( 
		if store.getName() = refProduct.getStore().getName() then
			(
				for currProd in store.getProducts() do (if currProd.getName() = productName then currProd.addStock(numberUnits));
			)  
		);
		
return "Result: success";
)
pre products(productIndex) in set elems products
	and exists order in set elems orders & order.getId() = orderId;
	

public concludeOrder: string * int ==> string
concludeOrder(email, orderId) == ( 
for order in orders do ( 
		if order.getId() = orderId then
			( 
			dcl auxRet : int ;
			if order.getUser().getEmail() = email then (auxRet := order.finishOrder());
			IO`println("Order Concluded. Bill:"); 
			for prod in order.getProducts() do (IO`print(prod.getName() ^ ". Quantity: "); IO`print(prod.getStock()); IO`print(" Unit Price: "); IO`println(prod.getPrice()));
			IO`print("Total: "); IO`println(order.getTotalCost()); 
			return "Result: success";
			)
		);

	return "error";
)
pre exists1 order in set elems orders & (order.getId() = orderId and order.getState() = <INIT>)
	and exists1 user in set elems users & user.getEmail() = email 
post exists order in set elems orders & (order.getId() = orderId and order.getState() = <ORDER_CONCLUDED>);


																										/***** LISTING OPERATORS ******/
-- "all" for all orders and "email" for user orders
public listOrdersDelivered: string  ==> string
listOrdersDelivered(request) == 
( 
if request = "all" then for order in orders do
(
 if order.getState() = <DELIVERED> then 
(
IO`print("Order ID: "); IO`println(order.getId());
IO`print("State of Order: "); IO`println(order.getState());
IO`print("Client: "); IO`println(order.getUser().getEmail());
IO`println("Products (if any): ");
if len order.getProducts() > 0 then 
(for product in order.getProducts() do (IO`print("Product: " ^ product.getName() ^ ". Units: "); IO`println(product.getStock())););
)
);

if request <> "all" then for order in orders do
(
 if order.getState() = <DELIVERED> then 
(
if (order.getUser().getEmail() = request) then ( 
IO`print("Order ID: "); IO`println(order.getId());
IO`print("State of Order: "); IO`println(order.getState());
IO`print("Client: "); IO`println(order.getUser().getEmail());
IO`println("Products (if any): ");
if len order.getProducts() > 0 then 
(for product in order.getProducts() do (IO`print("Product: " ^ product.getName() ^ ". Units: "); IO`println(product.getStock()));););
)
);

IO`println("\n");
return "Result: success";
)
pre orders <> [];


-- "all" for all orders and "email" for user orders
public listOrders: string  ==> string
listOrders(request) == 
( 
if request = "all" then for order in orders do
(
IO`print("Order ID: "); IO`println(order.getId());
IO`print("State of Order: "); IO`println(order.getState());
IO`print("Client: "); IO`println(order.getUser().getEmail());
IO`println("Products (if any): ");
if len order.getProducts() > 0 then 
(for product in order.getProducts() do (IO`print("Product: " ^ product.getName() ^ ". Units: "); IO`println(product.getStock())););
);

if request <> "all" then for order in orders do
(
if (order.getUser().getEmail() = request) then ( 
IO`print("Order ID: "); IO`println(order.getId());
IO`print("State of Order: "); IO`println(order.getState());
IO`print("Client: "); IO`println(order.getUser().getEmail());
IO`println("Products (if any): ");
if len order.getProducts() > 0 then 
(for product in order.getProducts() do (IO`print("Product: " ^ product.getName() ^ ". Units: "); IO`println(product.getStock()));););
);

IO`println("\n");
return "Result: success";
)
pre orders <> [];

public listOrdersByCourier: string  ==> string
listOrdersByCourier(cardId) == 
( 
for order in orders do (if order.getCourier().getCardID() = cardId then
	(IO`print("Order: "); IO`println(order.getId()););
	(IO`print("State: "); IO`println(order.getState()););
	(IO`print("Client: "); IO`println(order.getUser()););
	(IO`print("Total Cost: "); IO`println(order.getTotalCost()););
	IO`println("\n");
);

IO`println("\n");
return "Result: success";
)
pre orders <> [];


public listCategories: () ==> string
listCategories() == 
(
for all category in set categories do ( 
IO`println("Category: " ^ category);
);
return "Result: success";
)
pre categories <> {};

public listStores: string ==> string
listStores(categoryName) == 
(
IO`println("Stores with Category: " ^ categoryName);
for store in stores do  
	(
	if store.getCategory() = categoryName then (IO`println("Store: " ^ store.getName() ^ ". Description: " ^ store.getDescription()));
	);
return "Result: sucess";
)
pre categoryName in set categories and stores <> [];


public listStoreProducts: string ==> string
listStoreProducts(storeName) == 
(
dcl auxProducts : seq of Product ;
dcl countProds : int := 1;

IO`println("Products of: " ^ storeName);
	for store in stores do ( 
		if store.getName() = storeName then auxProducts := store.getProducts();
	);
	
	for auxProd in auxProducts do ( 
		IO`print(countProds); IO`println(" Name: " ^ auxProd.getName() ^ ". Description: " ^ auxProd.getDescription());
		IO`print("Unit Price: " ); IO`println(auxProd.getPrice());
		IO`print("Stock: " ); IO`println(auxProd.getStock());
		countProds:=countProds+1;
	);
	
return "Result: success";
)
pre exists1 store in set elems stores & store.getName() = storeName and stores <> [];

public listCouriers: () ==> string
listCouriers() == 
(
for courier in couriers do (IO`println("Courier ID: " ^ courier.getCardID()););
return "Result: success";
)
pre couriers <> [];


public listUsers: () ==> string
listUsers() == 
(
for user in users do (IO`println("User Email: " ^ user.getEmail()););
return "Result: success";
)
pre users <> [];


public listStoresWithDeliveryCost: real ==> string
listStoresWithDeliveryCost(deliveryCost) == 
(
for store in stores do  
	(
	if store.getDeliveryCost() <= deliveryCost then (IO`println("Store: " ^ store.getName() ^ ". Description: " ^ store.getDescription()));
	);
return "Result: sucess";
)
pre stores <> [];


public earnedMoneyFromStore: (string) ==> real
earnedMoneyFromStore(storeName) ==
(
for store in stores do(
	if store.getName() = storeName then(
		for all order in set elems orders do
		(
			 if order.getState() = <DELIVERED> then(
			 dcl aux : map Product to Product := {x|-> y | x in set elems order.getProducts() , y in set elems store.getProducts() & x.getName() = y.getName()};
			 dcl commonProducts : set of Product := dom aux;
			 dcl earned : real := 0;			 
			 for all product in set commonProducts do(
			 		earned := earned + product.getPrice() * product.getStock();
			  );
			  earned := earned -order.getCourier().getSalary();
			  return earned;
			  )
		);
		);
	);
	return 0;
)
pre orders <> [];
																										/***** GET OPERATORS ******/

public getUsers: () ==> seq of User
getUsers() == return users 
post RESULT = users;

public getCouriers: () ==> seq of Courier
getCouriers() == return couriers 
post RESULT = couriers;

public getOrders: () ==> seq of Order
getOrders() == return orders 
post RESULT = orders;

public getrefOrders: () ==> map int to int
getrefOrders() == return refOrders 
post RESULT = refOrders;

-- !USER --
-- see user information
-- list category
-- list stores by category
-- create order
-- cancel order
-- add product to order
-- close order
-- remove Product from Order

-- !ADMIN/ROBOT --
-- list all users
-- list all orders
-- list couriers
-- assign current orders to courier (closed orders)

-- !Courier --
-- list Courier orders 
-- Perform Order (Close order)
-- close order

 
functions
-- TODO Define functiones here
 traces
-- TODO Define Combinatorial Test Traces here
end Execution
-- create t := new Execution()
-- print t.createOrder("bernas@hotmail.com")
-- print t.addProductToOrder("bernas@hotmail.com",XXXX,"store1",1,1)
-- print t.concludeOrder("bernas@hotmail.com",XXXX)
-- print t.assignCourier("maria@glovo.com",XXXX)
-- print t.performOrder("maria@glovo.com",XXXX)
-- print t.increaseProductStock("store1",1,2)