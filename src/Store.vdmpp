class Store
types
public string = seq of char;
values
-- TODO Define values here
instance variables
private name : string;
private category : string;
private description : string;
private estimateTime : string;
private deliveryCost : real;
private products : seq of Product;

inv '-' in set elems estimateTime;

operations
public Store: string * string * string * string * real * seq of Product ==> Store
Store(na, ca, des, time, cost, prods) == (name := na; category:=ca; description := des; estimateTime:=time; deliveryCost := cost; products := prods; return self)
pre cost > 0
post self.deliveryCost = cost;

public getProduct: int ==> Product
getProduct(productIndex) == return products(productIndex);

public getProducts: () ==> seq of Product
getProducts() == return products;

public getName: () ==> string
getName() == return name
post RESULT = name;

public getCategory: () ==> string
getCategory() == return category
post RESULT = category;

public getDescription: () ==> string
getDescription() == return description
post RESULT = description;

public getEstimateTime: () ==> string
getEstimateTime() == return estimateTime
post RESULT = estimateTime;

public getDeliveryCost: () ==> real
getDeliveryCost() == return deliveryCost
post RESULT = deliveryCost;

public addProduct: Product ==> nat
addProduct(p) == (
products := products ^ [p];
p.setStore(self);
-- o produto adicionado fica com p.store = self;
return len products;
)
pre p not in set elems products
post p in set elems products;
functions
-- TODO Define Combinatorial Test Traces here
end Store