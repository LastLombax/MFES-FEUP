class Store
types
public string = seq of char;

instance variables
private name : string;
private category : string;
private description : string;
private estimateTime : string;
private deliveryCost : real;
private products : seq of Product;

inv estimateTime(2) = '-' or estimateTime(3) = '-' ;

operations
public Store: string * string * string * string * real * seq of Product ==> Store
Store(na, ca, des, time, cost, prods) == (name := na; category:=ca; description := des; estimateTime:=time; deliveryCost := cost; products := prods; return self)
pre cost > 0 
post deliveryCost = cost;

public addProduct: Product ==> nat
addProduct(p) == (
products := products ^ [p];
return len products;
)
pre p not in set elems products
post p in set elems products;

pure public getProduct: int ==> Product
getProduct(productIndex) == return products(productIndex)
post RESULT = products(productIndex);

pure public getProducts: () ==> seq of Product
getProducts() == return products
post RESULT = products;

pure public getName: () ==> string
getName() == return name 
post RESULT = name;

pure public getCategory: () ==> string
getCategory() == return category 
post RESULT = category;

pure public getDescription: () ==> string
getDescription() == return description 
post RESULT = description;

pure public getEstimateTime: () ==> string
getEstimateTime() == return estimateTime 
post RESULT = estimateTime;

pure public getDeliveryCost: () ==> real
getDeliveryCost() == return deliveryCost 
post RESULT = deliveryCost;

functions
-- TODO Define Combinatorial Test Traces here
end Store