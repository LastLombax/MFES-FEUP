class TestGlovo is subclass of MyTestCase
/*
 Contains the test cases for the Glovo app.
 Illustrates a scenario-based testing approach.
*/
types
public string = seq of char;

values
address : User`Address = mk_User`Address("as","as","as","Portugal");

instance variables
	exec : Execution := new Execution();
	orderId: int := 0;
	order: Order ;
 
operations
/***** USE CASE SCENARIOS ******/

 private test_CreateOrder: () ==> ()
 test_CreateOrder() ==
 (
 dcl currentRefOrders: map int to int;
 dcl orderIndex: nat;

 dcl currentNumOrders: int :=  len exec.getOrders();
 orderId := exec.createOrder("blankuser");
 
 currentRefOrders :=  exec.getrefOrders();
 orderIndex := currentRefOrders(orderId);
 order :=  exec.getOrders()(orderIndex);
 	
 assertEqual(currentNumOrders+1,len exec.getOrders());
 )
 pre exists user in set elems exec.users & user.getEmail() = "blankuser"
 post exists userOrder in set elems exec.orders & (userOrder.getId() = orderId and order.getState() = <INIT>);
 
  private test_cancelOrder: () ==> ()
 test_cancelOrder() ==
 (
 dcl currentRefOrders: map int to int;
 dcl orderIndex: nat;
 dcl auxRet: string;

 dcl currentNumOrders: int :=  len exec.getOrders();
 orderId := exec.createOrder("blankuser");
 
 currentRefOrders :=  exec.getrefOrders();
 orderIndex := currentRefOrders(orderId);
 order :=  exec.getOrders()(orderIndex);
 	
 assertEqual(currentNumOrders+1,len exec.getOrders());
 
 auxRet := exec.cancelOrder(order.getId());
 
 currentNumOrders := len exec.getOrders();
 
 assertEqual(currentNumOrders,1);
 );
 
 
  private test_AddProductToOrder: () ==> ()
 test_AddProductToOrder() ==
 (

 dcl numberProducts: int :=  len order.getProducts();
 
 dcl auxRet : string := exec.addProductToOrder("blankuser", orderId, "store1", 1, 1);
 dcl newNumberProducts: int :=  len order.getProducts();
 assertEqual(newNumberProducts,numberProducts+1);

 )
 pre exists1 userOrder in set elems exec.orders & (userOrder.getId() = orderId and userOrder.getState() = <INIT>)
	and exists user in set elems exec.users & user.getEmail() = "blankuser"
	and exists store in set elems exec.stores & store.getName() = "store1"
	and exec.products(1) in set elems exec.products;
 
  private test_concludeOrder: () ==> ()
 test_concludeOrder() ==
 (
	dcl auxRet : string;
	assertTrue(order.getState() = <INIT>);
	
 	auxRet := exec.concludeOrder("blankuser", orderId);
 	
	assertTrue(len order.getProducts() > 0);
	assertTrue(order.getState() = <ORDER_CONCLUDED>);

 )
 pre exists1 userOrder in set elems exec.orders & (userOrder.getId() = orderId and userOrder.getState() = <INIT>)
	and exists1 user in set elems exec.users & user.getEmail() = "blankuser"
post exists userOrder in set elems exec.orders & (userOrder.getId() = orderId and userOrder.getState() = <ORDER_CONCLUDED>);
 
  private test_assignCourier: string ==> ()
 test_assignCourier(cardId) ==
 (
 	dcl auxRet : string;
 	
 	auxRet := exec.assignCourier(cardId,orderId);
	assertTrue(order.getCourier().getCardID() = cardId);

 )
pre exists1 userOrder in set elems exec.orders & (userOrder.getId() = orderId and (order.courier = nil or userOrder.getCourier().getCardID() <> cardId) and userOrder.getState() = <ORDER_CONCLUDED>)
 and exists1 courier in set elems exec.couriers & courier.getCardID() = cardId
post exists1 userOrder in set elems exec.orders & (userOrder.getId() = orderId and userOrder.getCourier().getCardID() = cardId);
 
   private test_performOrder: string ==> ()
 test_performOrder(cardId) ==
 (
 	dcl auxRet : string;
 	dcl totalMoney : real;
 	
 	assertTrue(order.getCourier().getCardID() = cardId);
 	assertTrue(order.getState() = <ORDER_CONCLUDED>);
 	
 	auxRet := exec.performOrder(cardId,orderId);
 	totalMoney := exec.earnedMoneyFromStore("store1");
 	
	assertTrue(order.getState() = <DELIVERED>);

 )
 pre (orderId in set dom exec.refOrders
 and exists1 userOrder in set elems exec.orders & userOrder.getId() = orderId
 and exists1 courier in set elems exec.couriers & courier.getCardID() = cardId
 );
 
   private test_addUser: string ==> ()
 test_addUser(email) ==
 (
 	dcl auxRet : string;
	dcl hasUser : bool := false;
	for user in exec.getUsers() do ( if user.getEmail() = email then hasUser := true);
	
	assertTrue(hasUser = false);
	
	auxRet := exec.addUser(email, "Number", "Liberty", "3310-119", "Feuplandia");
	
	for user in exec.getUsers() do ( if user.getEmail() = email then hasUser := true);
	
	assertTrue(hasUser = true);
	

 );
 
   private test_addCourier: string ==> ()
 test_addCourier(cardId) ==
 (
 	dcl auxRet : string;
	dcl hasCourier : bool := false;
	for courier in exec.getCouriers() do ( if courier.getCardID() = cardId then hasCourier := true);
	
	assertTrue(hasCourier = false);
	
	auxRet := exec.addCourier(cardId, 1000);
	
	for courier in exec.getCouriers() do ( if courier.getCardID() = cardId then hasCourier := true);
	
	assertTrue(hasCourier = true);
	

 );
 
    private test_editProfile: string ==> ()
 test_editProfile(userEmail) ==
 (
	dcl auxRet : string;
	dcl refUser : User;
	
	auxRet := exec.editProfile(userEmail, "newName", <Female>, 99);
	
	for user in exec.getUsers() do ( if user.getEmail() = userEmail then refUser := user; );
	
	assertEqual(refUser.getName(), "newName");
	assertEqual(refUser.getGender(), <Female>);
	assertEqual(refUser.getAge(), 99);

 );
 
    private test_increaseProductStock: () ==> ()
 test_increaseProductStock() ==
 (
	dcl auxRet : string;
	dcl prodStock : int;
	dcl refStores : seq of Store;
	
	refStores := exec.stores;
	prodStock := refStores(1).getProducts()(1).getStock();

	auxRet := exec.increaseProductStock(refStores(1).getName(), 1, 10);
	
	assertEqual(refStores(1).getProducts()(1).getStock(), prodStock+10);

 );
 
 
    private test_lists: () ==> ()
 test_lists() ==
 (
 dcl auxRet : string;
 
 auxRet := exec.listCategories();
 auxRet := exec.listStores("pizza");
 auxRet := exec.listStoreProducts("store1");
 auxRet := exec.listOrders("all");
 auxRet := exec.listOrders("blankuser");
 auxRet := exec.listOrdersDelivered("all");
 auxRet := exec.listOrdersDelivered("blankuser");
 auxRet := exec.listOrdersDelivered("blankuser");
 auxRet := exec.listUsers();
 auxRet := exec.listCouriers();
 auxRet := exec.listStoresWithDeliveryCost(3);
 auxRet := exec.listOrdersByCourier("newCourier@glovo.com");
 

 );
 
 public static main: () ==> ()
 main() ==
 (
 dcl testGlovo: TestGlovo :=  new TestGlovo();
 
 	testGlovo.test_increaseProductStock();
	testGlovo.test_CreateOrder();
	testGlovo.test_AddProductToOrder();
	testGlovo.test_concludeOrder();
	testGlovo.test_assignCourier("maria@glovo.com");
	testGlovo.test_performOrder("maria@glovo.com");
	testGlovo.test_cancelOrder();
	testGlovo.test_addUser("newUser@mail.com");
	testGlovo.test_addCourier("newCourier@glovo.com");
	testGlovo.test_editProfile("blankuser");
	testGlovo.test_lists();

 );
 
 traces
 -- test cases will be generated in possible combinations
 testaddUsers :
(let email in set {"email1@hotmail.com","email2@hotmail.com"} in exec.addUser(email,"address","street","1440-100","PT")){1,2};

 testCreateOrders :
(let email in set {"email1@hotmail.com","email2@hotmail.com"} in exec.createOrder(email)){1,5};
  
-- setPersonInfo(courier), cancelOrder, earnedMoneyFromStore, increaseProductStock, removeProductFromOrder, setState(order), 
-- todas de Person, 
-- addStock e getStore de product, 
-- addProduct e getEstimateTime de Store
-- E a getAddress e os setters de User
 
	
end TestGlovo
