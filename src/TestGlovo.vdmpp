class TestGlovo is subclass of MyTestCase
/*
 Contains the test cases for the Glovo app.
 Illustrates a scenario-based testing approach.
*/
types
public string = seq of char;

values

instance variables
	exec : Execution := new Execution();
	orderId: int := 0;
	order: Order ;
 
operations
/***** USE CASE SCENARIOS ******/

 private test_CreateOrder: () ==> ()
 test_CreateOrder() ==
 (
 dcl currentRefOrders: map int to int;
 dcl orderIndex: nat;

 dcl currentNumOrders: int :=  len exec.getOrders();
 orderId := exec.createOrder("blankuser");
 
 currentRefOrders :=  exec.getrefOrders();
 orderIndex := currentRefOrders(orderId);
 order :=  exec.getOrders()(orderIndex);
 	
 assertEqual(currentNumOrders+1,len exec.getOrders());
 )
 pre exists user in set elems exec.users & user.email = "blankuser"
 post exists userOrder in set elems exec.orders & (userOrder.orderID = orderId and order.state = <INIT>);
 
 
  private test_AddProductToOrder: () ==> ()
 test_AddProductToOrder() ==
 (

 dcl numberProducts: int :=  len order.getProducts();
 
 dcl auxRet : string := exec.addProductToOrder("blankuser", orderId, "store1", 1, 1);
 dcl newNumberProducts: int :=  len order.getProducts();
 assertEqual(newNumberProducts,numberProducts+1);

 )
 pre exists1 userOrder in set elems exec.orders & (userOrder.orderID = orderId and userOrder.state = <INIT>)
	and exists user in set elems exec.users & user.email = "blankuser"
	and exists store in set elems exec.stores & store.name = "store1"
	and exec.products(1) in set elems exec.products;
 
  private test_concludeOrder: () ==> ()
 test_concludeOrder() ==
 (
	dcl auxRet : string;
	assertTrue(order.getState() = <INIT>);
	
 	auxRet := exec.concludeOrder("blankuser", orderId);
 	
	assertTrue(len order.getProducts() > 0);
	assertTrue(order.getState() = <ORDER_CONCLUDED>);

 )
 pre exists1 userOrder in set elems exec.orders & (userOrder.orderID = orderId and userOrder.state = <INIT>)
	and exists1 user in set elems exec.users & user.email = "blankuser"
post exists userOrder in set elems exec.orders & (userOrder.orderID = orderId and userOrder.state = <ORDER_CONCLUDED>);
 
  private test_assignCourier: string ==> ()
 test_assignCourier(cardId) ==
 (
 	dcl auxRet : string;
 	
 	auxRet := exec.assignCourier(cardId,orderId);
	assertTrue(order.getCourier().getcardID() = cardId);

 )
pre exists1 userOrder in set elems exec.orders & (userOrder.orderID = orderId and (order.courier = nil or userOrder.courier.cardID <> cardId) and userOrder.state = <ORDER_CONCLUDED>)
 and exists1 courier in set elems exec.couriers & courier.cardID = cardId
post exists1 userOrder in set elems exec.orders & (userOrder.orderID = orderId and userOrder.courier.cardID = cardId);
 
   private test_performOrder: string ==> ()
 test_performOrder(cardId) ==
 (
 	dcl auxRet : string;
 	
 	assertTrue(order.getCourier().getcardID() = cardId);
 	assertTrue(order.getState() = <ORDER_CONCLUDED>);
 	
 	auxRet := exec.performOrder(cardId,orderId);
 	
	assertTrue(order.getState() = <DELIVERED>);

 )
 pre (orderId in set dom exec.refOrders
 and exists1 userOrder in set elems exec.orders & userOrder.orderID = orderId
 and exists1 courier in set elems exec.couriers & courier.cardID = cardId
 );
 
   private test_addUser: string ==> ()
 test_addUser(email) ==
 (
 	dcl auxRet : string;
	dcl hasUser : bool := false;
	for user in exec.getUsers() do ( if user.getEmail() = email then hasUser := true);
	
	assertTrue(hasUser = false);
	
	auxRet := exec.addUser(email, "Number", "Liberty", "3310-119", "Feuplandia");
	
	for user in exec.getUsers() do ( if user.getEmail() = email then hasUser := true);
	
	assertTrue(hasUser = true);
	

 );
 
   private test_addCourier: string ==> ()
 test_addCourier(cardId) ==
 (
 	dcl auxRet : string;
	dcl hasCourier : bool := false;
	for courier in exec.getCouriers() do ( if courier.getcardID() = cardId then hasCourier := true);
	
	assertTrue(hasCourier = false);
	
	auxRet := exec.addCourier(cardId, 1000);
	
	for courier in exec.getCouriers() do ( if courier.getcardID() = cardId then hasCourier := true);
	
	assertTrue(hasCourier = true);
	

 );
 
 public static main: () ==> ()
 main() ==
 (
 dcl testGlovo: TestGlovo :=  new TestGlovo();
 
	testGlovo.test_CreateOrder();
	testGlovo.test_AddProductToOrder();
	testGlovo.test_concludeOrder();
	testGlovo.test_assignCourier("maria@glovo.com");
	testGlovo.test_performOrder("maria@glovo.com");
	testGlovo.test_addUser("newUser@mail.com");
	testGlovo.test_addCourier("newCourier@glovo.com");

 );

end TestGlovo
